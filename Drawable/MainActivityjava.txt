package com.pooja.drawabletoexternamstorage;

import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Environment;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;

import static android.Manifest.permission.CAMERA;
import static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;
import static android.os.Environment.DIRECTORY_DOCUMENTS;
import static android.os.Environment.getExternalStorageDirectory;

public class MainActivity extends AppCompatActivity {
    Button btn_external,check;
    private static final int PERMISSION_REQUEST_CODE = 100;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        btn_external = (Button) findViewById(R.id.button_savetoexternal);
        check=(Button)findViewById(R.id.button_check_perm);
        check.setOnClickListener(new View.OnClickListener()
        {
            @Override
            public void onClick(View view) {
                if(checkPermission())
                {

                    Toast.makeText(MainActivity.this,"Permission for Storing into External storage granted",Toast.LENGTH_LONG).show();
                }
                else if(!checkPermission())
                {
                    requestPermission();
                    Toast.makeText(MainActivity.this,"Requesting permission",Toast.LENGTH_LONG).show();
                }
                else
                {
                    Toast.makeText(MainActivity.this,"Permission granted already",Toast.LENGTH_LONG).show();
                }
            }
        });

    }
//for converting image in drawable folder to byte[]
    public byte[] converttobyte() {
        Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.leopord);
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
        byte[] bytes = stream.toByteArray();
        return bytes;
    }

    //this will get the state of the external storage
    public String getstate() {
        boolean isavailable = false;
        boolean iswritable = false;
        String state = Environment.getExternalStorageState();
        Toast.makeText(MainActivity.this, "State" + state, Toast.LENGTH_LONG).show();
        if (Environment.MEDIA_MOUNTED.equals(state))
        {
            isavailable = iswritable = true;
        } else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state))
        {
            isavailable = true;
            iswritable = false;
        } else
        {
            isavailable = iswritable = false;
        }
        return state;
    }

    public void toexternalstorage(View view) throws IOException {

        String state = getstate();
        if (Environment.MEDIA_MOUNTED.equals(state))
        {
                byte[] getbytes = converttobyte();
                File folder = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
                File myfile = new File(folder, "PicsDrawable.jpeg");
                FileOutputStream fileOutputStream = null;
                try {
                    fileOutputStream = new FileOutputStream(myfile);
                    fileOutputStream.write(getbytes);
                    Toast.makeText(MainActivity.this, "Successfully saved image", Toast.LENGTH_LONG).show();
                } catch (FileNotFoundException e) {
                } catch (IOException e) {
                } finally {
                    fileOutputStream.close();
                }
            } else {
                Toast.makeText(MainActivity.this, "Cannot Write to storage", Toast.LENGTH_LONG).show();
            }
        }



    private boolean checkPermission()
    {
        int result = ContextCompat.checkSelfPermission(getApplicationContext(),WRITE_EXTERNAL_STORAGE);
        return result == PackageManager.PERMISSION_GRANTED;
    }


    public void requestPermission()
    {
        ActivityCompat.requestPermissions(this,new  String[]{WRITE_EXTERNAL_STORAGE},PERMISSION_REQUEST_CODE);
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        if(requestCode==PERMISSION_REQUEST_CODE && grantResults.length>0)
        {
            boolean StorageAccepted = grantResults[0] == PackageManager.PERMISSION_GRANTED;

            if(StorageAccepted)
            {
                Toast.makeText(this,"Permission for Storage granted",Toast.LENGTH_LONG).show();

            }else
            {
                Toast.makeText(this,"Permission denied",Toast.LENGTH_LONG).show();
            }
        }
        return;
    }
}